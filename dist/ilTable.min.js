/**
LICENSE MIT 2015 ilausuch@gmail.com	
*/
angular.module("il.ui.table", ['ngSanitize','pascalprecht.translate','ui.bootstrap'])
	.filter('ilTableSlice', function() {
	  return function(arr, start, count) {
	  		if (count==undefined)
		  		return arr;
		  	else
		  		return (arr || []).slice(start, start+count);
	  };
	})
	.filter("ilTableSanitice", ['$sce', function($sce) {
	  return function(htmlCode){
	    return $sce.trustAsHtml(htmlCode);
	  }
	}])
	
	.directive('datepickerLocaldate', ['$parse', function ($parse) {
		var directive = {
			restrict: 'A',
			require: ['ngModel'],
			link: link
		};
		return directive;
		 
		function link(scope, element, attr, ctrls) {
			var ngModelController = ctrls[0];
			
				
			// called with a JavaScript Date object when picked from the datepicker
			ngModelController.$parsers.push(function (viewValue) {
				if (viewValue==undefined)
					return undefined;
				
				if (typeof viewValue == "string" )
					viewValue=new Date(viewValue);
					
				// undo the timezone adjustment we did during the formatting
				viewValue.setMinutes(viewValue.getMinutes() - viewValue.getTimezoneOffset());
				// we just want a local date in ISO format
				return viewValue.toISOString().substring(0, 10);
			});
			 
			// called with a 'yyyy-mm-dd' string to format
			ngModelController.$formatters.push(function (modelValue) {
				if (!modelValue)
					return undefined;
					
			// date constructor will apply timezone deviations from UTC (i.e. if locale is behind UTC 'dt' will be one day behind)
			var dt = new Date(modelValue);
			// 'undo' the timezone offset again (so we end up on the original date again)
			dt.setMinutes(dt.getMinutes() + dt.getTimezoneOffset());
				return dt;
			});
		}
	}])
	
	.directive('ilTable', function() {
		var controller = ['$scope','$timeout','$attrs', function ($scope,$timeout,$attrs) {
		
			if ($scope.search==undefined)
				$scope._search=false;
			else
				$scope._search=$scope.search;
			
			
			$scope.results=$scope.model;
			
			$scope.$watch("model",function updateModel(){
				$scope.results=$scope.model;
				$scope.searchCad="";
			});
			
			$scope.rowItemEdit = undefined;
			$scope.changed=[];
			$scope.editedObject={}
			$scope.searchColspan=0;
			$scope.searchCad="";
			$scope.orderBy=undefined;
			$scope.pagination_desp=0;
			$scope.pagination_page=1;
			$scope.pagination_pages=1;
			$scope.visual="$visual"+Math.round(Math.random()*100000);
			
			if ($scope.showTitleColumn==undefined)
				$scope.showTitleColumn=true;	
			
			
			$scope.$watch("pagination_page",function(){
				$scope.pagination_desp=($scope.pagination_page-1)*$scope.itemsPerPage;
				$scope.editRow(undefined);
			});
			
			$scope.$watch("columns",function(){
				if ($scope.columns!=undefined){
					$scope.searchColspan = $scope.columns.length +1;
					
					if ($scope.select!=undefined && $scope.select)
						$scope.searchColspan++;
						
					if ($scope.expand!=undefined && $scope.expand)
						$scope.searchColspan++;
				}
						
			});

				
			$scope.editRow=function(item,forceSave){
				if ($scope.autoupdatePrompt==undefined)
					var _noPrompt=false;
				else
					_noPrompt=!$scope.autoupdatePrompt;
				
				if ($scope.editable){
					if ($scope.rowItemEdit!=undefined && $scope.changed.length>0){
						if (forceSave || _noPrompt || confirm($scope.getTextSaveConfirm())){
							
							if ($scope.autoupdate!=undefined){
								for (k in $scope.changed){
									var column=$scope.changed[k];
									$scope.rowItemEdit[column.field]=$scope.editedObject[column.field];
								}
								
								
								if ($scope.onAutoupdate!=undefined)
									$scope.onAutoupdate({item:$scope.rowItemEdit});
									
							}else{
								if($scope.onSave!=undefined)
									$scope.onSave({item:$scope.rowItemEdit,data:$scope.editedObject});
							}
						}
					}
					
					$scope.changed=[];
					$scope.rowItemEdit=item;
					$scope.editedObject={};
					
					if (item!=undefined)
						for(k in $scope.columns){
							var column=$scope.columns[k];
							$scope.editedObject[column.field]=item[column.field];
						}
						
				}
				else{
					if ($scope.onSelect!=undefined)
						$scope.onSelect(item);
				}
			}
			
			$scope.prepareVisual=function(item){
				if (item[$scope.visual]==undefined)
					item[$scope.visual]={}
			}
						
			$scope._onChange=function(item,column){
				$scope.changed.push(column);
			}
						
			$scope.getType=function(column){
				if (column.type==undefined)
					return 'text';
					
				return column.type;
			}
			
			$scope.checkBoolean=function(item,column){
				return item[column.field]==column.options.true_value;
			}
			
			$scope.toggleBoolean=function(item,column){
				if (item[column.field]==column.options.true_value)
					item[column.field]=column.options.false_value;
				else
					item[column.field]=column.options.true_value;
					
				$scope._onChange(item,column);
			}
			
			$scope.getValue=function(item,column){
				switch($scope.getType(column)){
					case "text":
					case "textarea":
					case "boolean":
					case "html":
					case "date":
						return item[column.field];
					case "select-object":
					case "autocomplete-object":
						return item[column.field][column.options.field];
					case "select":
					case "autocomplete":
						for (k in column.options.list)
							if (column.options.list[k].value==item[column.field])
								return column.options.list[k].label;
								
						return "error";
					default:
						return "";
				}
			}
			
			$scope.accentFold=function(inStr) {
				if (inStr==undefined) return "";
				inStr=""+inStr;
				return inStr.replace(/([àáâãäå])|([ç])|([èéêë])|([ìíîï])|([ñ])|([òóôõöø])|([ß])|([ùúûü])|([ÿ])|([æ])/g, function(str,a,c,e,i,n,o,s,u,y,ae) { if(a) return 'a'; else if(c) return 'c'; else if(e) return 'e'; else if(i) return 'i'; else if(n) return 'n'; else if(o) return 'o'; else if(s) return 's'; else if(u) return 'u'; else if(y) return 'y'; else if(ae) return 'ae'; });
			}

			$scope.searchFilter=function(item){
				
				if ($scope.searchCad=="")
					return true;
					
				var searchCad=$scope.accentFold($scope.searchCad.toLowerCase());
				
				for (k in $scope.columns){
					var column=$scope.columns[k];

					if ($scope.accentFold($scope.getValue(item,column).toLowerCase()).indexOf(searchCad)>-1)
						return true;
				}
				
				return false;	
			}
			
			$scope.onChangeSearch=function(){
				$timeout(function(){
					$scope.calcPagination();
				});
			}
			
			$scope.calcPagination=function(){
				if ($scope.results==undefined)
					var count=$scope.model.length;
				else
					var count=$scope.results.length;
				
				$scope.pagination_pages=Math.ceil(count/$scope.itemsPerPage);
				$scope.pagination_page=1;
			}
			
			$scope.changeOrder=function(column){
				if ($scope.order==false)
					return;
					
				if ($scope.orderBy!=undefined && $scope.orderBy.column==column){
					if ($scope.orderBy.reverse==false)
						$scope.orderBy.reverse=true;
					else
						$scope.orderBy=undefined;
				}
				else
					$scope.orderBy={column:column,reverse:false};
					
			}
			
			$scope.orderByFilter=function(item){
				if ($scope.orderBy==undefined)
					return 0;
				else
					return $scope.getValue(item,$scope.orderBy.column);
			}
			
			$scope._onSelect=function(item){
				if (item[$scope.visual].selected)
					$scope._unselectAllInCase(item);
				
				var list=[];
				for(k in $scope.results)
					if ($scope.prepareVisual($scope.results[k]) || $scope.results[k][$scope.visual].selected)
						list.push($scope.results[k]);
						
				$scope.onSelect({items:list});
			}
			
			$scope._onDelete=function(item){
				if (confirm($scope.getTextDeleteConfirm())){
					for(k in $scope.model)
						if ($scope.model[k]==item)
							$scope.model.splice(k,1);
							
					if ($scope.onDelete)
						$scope.onDelete({item:item});
				}
			}
			
			$scope._onExpand=function(item){
				console.debug("ITEM",item);
				$scope.prepareVisual(item);
									
				if (item[$scope.visual].expand==undefined)
					item[$scope.visual].expand=false;
				
				item[$scope.visual].expand=!item[$scope.visual].expand;
				
				if (item[$scope.visual].expand && $scope.onExpand!=undefined)
					$scope.onExpand({item:item});
			}
			
			$scope._onExtraButton=function(item,button){
				if ($scope.onExtraButtons!=undefined)
					$scope.onExtraButtons({item:item,button:button});
			}
			
			$scope.getTextSaveConfirm=function(){
				if ($scope.textSaveConfirm!=undefined)
					return $scope.textSaveConfirm;
				else 
					return "save changes?";
			}
			
			$scope.getTextDeleteConfirm=function(){
				if ($scope.textDeleteConfirm!=undefined)
					return $scope.textDeleteConfirm;
				else 
					return "Are you sure?";
			}
						
			$scope._changeItemsPerPage=function(choice){
				$scope.itemsPerPage=choice;
			}
			
			$scope._onTypeheadSelect=function($item, $model, $label,item,column){
				if (column.type=="autocomplete"){
					item[column.field]=$item.value;
					$scope._onChange(item,column);
				}
			}
			
			$scope.autocompleteFormat=function(editedObject,$model,column){
				if ($model!=undefined)
					return $model.label;
				else
					if (editedObject!=undefined)
						for(k in column.options.list)
							if (column.options.list[k].value==editedObject[column.field])
								return column.options.list[k].label;
					
					
				return "";
			}
			$scope._if=function(item,column,type){
				return !column.readonly && $scope.getType(column)==type && $scope.editedObject && item==$scope.rowItemEdit;
			}
			
			$scope._autocompleteFilter=function(column,search){
				return function(value,index) {
					search=$scope.accentFold(search).toLowerCase();
					if (column.type=='autocomplete-object')
						return $scope.accentFold(value[column.options.field]).toLowerCase().substr(0, search.length)==search;
					
					if (column.type=='autocomplete')
						return $scope.accentFold(value.label).toLowerCase().substr(0, search.length)==search;
			    }
			}
			
			$scope._onSelectAll=function(){
				for (k in $scope.results){
					$scope.prepareVisual($scope.results[k]);
						
					if ($scope.allSelected)
						$scope.results[k][$scope.visual].selected=true;
					else
						$scope.results[k][$scope.visual].selected=false;
				}
				if ($scope.allSelected)
					$scope.onSelect({items:$scope.results});
				else
					$scope.onSelect({items:[]});
			}
			
			$scope._unselectAllInCase=function(item){
				if (!$scope.selectMultiple)
					for (k in $scope.model)
						if ($scope.model[k]!=item && $scope.model[k][$scope.visual]!=undefined)
							$scope.model[k][$scope.visual].selected=false;
			}
			
			$scope._selectItem=function(item){
				$scope.prepareVisual(item);
				$scope._unselectAllInCase(item);
							
				item[$scope.visual].selected=true;
				
				$scope._onSelect(item);	
			}
			
			$scope._onClickItem=function(item){
				if ($scope.selectOnClick)
					$scope._selectItem(item);
					
				$scope.onClickItem({item:item});
			}	
			
			$scope.openDatePicker = function($event,column) {
				$event.preventDefault();
				$event.stopPropagation();
				
				column.$$opened = true;          
			};
			
			$scope.dateOptions = {
				startingDay: 1
			};
		}];
		
		template='<table> <thead> <tr ng-show="search" class="_head_search"> <th colspan="{{searchColspan}}"> <input type="search" placeholder="{{\'search\'|translate}}..." ng-model="searchCad" ng-change="onChangeSearch()" style="width: 100%" class="form-control"></input> </th> <tr> <tr class="ilTable_head_titles"> <th ng-show="select"> <input type="checkbox" ng-model="allSelected" ng-change="_onSelectAll()"> {{selectLabel|translate}} </th> <th ng-if="expand"> {{expandLabel|translate}} </th> <th ng-repeat="column in columns" ng-click="changeOrder(column)" style="cursor:pointer" class="ilTable_th_field_{{column.field}}"> {{column.title|translate}} <span class="glyphicon glyphicon-triangle-bottom" ng-show="orderBy.column==column && !orderBy.reverse"></span> <span class="glyphicon glyphicon-triangle-top" ng-show="orderBy.column==column && orderBy.reverse"></span> </th> <th> {{operationsLabel|translate}} </th> </tr> </thead> <tbody> <tr ng-repeat-start="item in results=(model | filter:searchFilter) | orderBy:orderByFilter:orderBy.reverse | ilTableSlice : pagination_desp : itemsPerPage " ng-hide="rowItemEdit==item" ng-class="{\'ilTable_tr_selected\':item[visual].selected && (select||selectOnClick), \'ilTable_tr_noEditing\':rowItemEdit!=undefined && rowItemEdit!=item}" ng-click="_onClickItem(item)"> <td ng-if="select" style="vertical-align: middle"> <input type="checkbox" ng-model="item[visual].selected" ng-change="_onSelect(item)"/> </td> <td ng-if="expand" style="vertical-align: middle"> <span class="glyphicon glyphicon-triangle-right" ng-hide="item[visual].expand" ng-click="_onExpand(item)" style="cursor: pointer"></span> <span class=" glyphicon glyphicon-triangle-bottom" ng-show="item[visual].expand" ng-click="_onExpand(item)" style="cursor: pointer"></span> </td> <td ng-repeat="column in columns" style="cursor:pointer;vertical-align: middle" ng-click="clickToEdit&&editRow(item)" class="ilTable_td_field_{{column.field}}"> <span ng-if="getType(column)==\'text\'||getType(column)==\'textarea\'">{{item[column.field]}}</span> <span ng-if="getType(column)==\'date\'">{{item[column.field]|date}}</span> <span ng-if="getType(column)==\'boolean\'"> <span ng-if="checkBoolean(item,column) && column.options.true_html" ng-bind-html="column.options.true_html"></span> <span ng-if="!checkBoolean(item,column) && column.options.false_html" ng-bind-html="column.options.false_html"></span> <span ng-if="checkBoolean(item,column) && !column.options.true_html">{{\'yes\'|translate}}</span> <span ng-if="!checkBoolean(item,column) && !column.options.false_html">{{\'no\'|translate}}</span> </span> <span ng-if="getType(column)==\'select-object\'||getType(column)==\'autocomplete-object\'">{{item[column.field][column.options.field]|translate}}</span> <span ng-if="getType(column)==\'select\'||getType(column)==\'autocomplete\'">{{getValue(item,column)|translate}}</span> <div ng-if="getType(column)==\'html\'" ng-bind-html="item[column.field] | ilTableSanitice"></div> <div ng-if="getType(column)==\'template\'" ng-include="column.options.url"></div> <div ng-if="getType(column)==\'func\'" ng-bind-html="column.func(item) | ilTableSanitice"></div> </td> <td nowrap class="ilTable_td_operations" style="vertical-align: middle" nowrap> <span class="glyphicon glyphicon-pencil" ng-if="editable" ng-click="editRow(item)" style="cursor:pointer; padding-right: 0.5em" aria-hidden="true"></span> <span class="glyphicon glyphicon-trash" ng-if="delete" ng-click="_onDelete(item)" style="cursor:pointer; padding-right: 0.5em" aria-hidden="true"></span> <span ng-repeat="button in extraButtons" class="glyphicon {{button.class}}" ng-click="_onExtraButton(item,button)" style="cursor:pointer; padding-right: 0.5em" aria-hidden="true"></span> </td> </tr> <tr ng-if="editable" ng-show="rowItemEdit==item" class="ilTable_tr_editing" ng-class="{\'ilTable_tr_selected\':item[visual].selected}"> <td ng-if="select" style="vertical-align: middle"> <input type="checkbox" ng-model="item[visual].selected" ng-change="_onSelect(item)"/> </td> <td ng-if="expand" style="vertical-align: middle"> <span class="glyphicon glyphicon-triangle-right" ng-hide="item[visual].expand" ng-click="_onExpand(item)" style="cursor: pointer"></span> <span class=" glyphicon glyphicon-triangle-bottom" ng-show="item[visual].expand" ng-click="_onExpand(item)" style="cursor: pointer"></span> </td> <td ng-repeat="column in columns" class="ilTable_td_field ilTable_td_editing ilTable_td_field_{{column.field}}"> <span class="ilTable_edit_readonly ilTable_edit_readonly_text"ng-if="column.readonly && (getType(column)==\'text\'||getType(column)==\'textarea\')">{{item[column.field]}}</span> <span class="ilTable_edit_readonly ilTable_edit_readonly_date"ng-if="column.readonly && getType(column)==\'date\'">{{item[column.field]|date}}</span> <span class="ilTable_edit_readonly ilTable_edit_readonly_select" ng-if="column.readonly && getType(column)==\'select-object\'">{{item[column.field][column.options.field]}}</span> <span class="ilTable_edit_readonly ilTable_readonly_boolean" ng-if="column.readonly && getType(column)==\'boolean\'" ng-class="{\'glyphicon glyphicon-check\':checkBoolean(item,column), \'glyphicon glyphicon-unchecked\':!checkBoolean(item,column)}"></span> <input ng-if="_if(item,column,\'text\')" class="form-control ilTable_edit ilTable_edit_text" type="text" ng-model="editedObject[column.field]" style="width: 100%; padding: 0px" ng-change="_onChange(editedObject,column)"></input> <textarea ng-if="_if(item,column,\'textarea\')" class="form-control ilTable_edit ilTable_edit_textarea" ng-model="editedObject[column.field]" ng-change="_onChange(editedObject,column)" style="width: 100%; padding: 0px"></textarea> <select ng-if="_if(item,column,\'select-object\')" class="form-control ilTable_edit ilTable_edit_select" type="text" ng-model="editedObject[column.field]" ng-options="selectItem as selectItem[column.options.field]|translate for selectItem in column.options.list" style="width: 100%; padding: 0px" ng-change="_onChange(editedObject,column)"></select> <input ng-if="_if(item,column,\'autocomplete-object\')" class="form-control ilTable_edit ilTable_edit_autocomplete" type="text" ng-model="editedObject[column.field]" typeahead="selectItem as selectItem[column.options.field]|translate for selectItem in column.options.list | filter:_autocompleteFilter(column,$viewValue)" class="form-control" typeahead-editable="false" typeahead-on-select="_onChange(editedObject,column)" style="width: 100%; padding: 0px" > <select ng-if="_if(item,column,\'select\')" class="form-control ilTable_edit ilTable_edit_select" type="text" ng-model="editedObject[column.field]" ng-options="selectItem.value as selectItem.label|translate for selectItem in column.options.list" style="width: 100%; padding: 0px" ng-change="_onChange(editedObject,column)"></select> <input ng-if="_if(item,column,\'autocomplete\')" class="ilTable_edit ilTable_edit_autocomplete" type="text" ng-model="editedObject[column.field]" typeahead="selectItem as selectItem.label|translate for selectItem in column.options.list | filter:_autocompleteFilter(column,$viewValue)" class="form-control" typeahead-editable="false" typeahead-on-select="_onTypeheadSelect($item, $model, $label,editedObject,column)" typeahead-input-formatter="autocompleteFormat(editedObject,$model,column)" placeholder="{{autocompleteFormat(editedObject,undefined,column)}}" style="width: 100%; padding: 0px"> <span ng-if="_if(item,column,\'boolean\')" class="ilTable_edit ilTable_edit_boolean"> <span ng-if="checkBoolean(editedObject,column) && column.options.true_html" ng-bind-html="column.options.true_html" ng-click="toggleBoolean(editedObject,column)" style="cursor: pointer"></span> <span ng-if="!checkBoolean(editedObject,column) && column.options.false_html" ng-bind-html="column.options.false_html" ng-click="toggleBoolean(editedObject,column)" style="cursor: pointer"></span> <span ng-if="checkBoolean(editedObject,column) && !column.options.true_html" ng-click="toggleBoolean(editedObject,column)" style="cursor: pointer">{{\'yes\'|translate}}</span> <span ng-if="!checkBoolean(editedObject,column) && !column.options.false_html" ng-click="toggleBoolean(editedObject,column)" style="cursor: pointer">{{\'no\'|translate}}</span> </span> <div ng-if="_if(item,column,\'html\')" class="ilTable_edit ilTable_edit_html" ng-bind-html="editedObject[column.field] | ilTableSanitice"></div> <div ng-if="_if(item,column,\'template\') && !column.options.urlEdit" class="ilTable_edit ilTable_edit_template" ng-include="column.options.url"></div> <div ng-if="_if(item,column,\'template\') && column.options.urlEdit" class="ilTable_edit ilTable_edit_template" ng-include="column.options.urlEdit"></div> <div ng-if="_if(item,column,\'func\')" class="ilTable_edit ilTable_edit_func" ng-bind-html="column.func(item) | ilTableSanitice"></div> <p class="input-group" ng-if="_if(item,column,\'date\')"> <span class="input-group-btn"> <button type="button" class="btn btn-default" ng-click="openDatePicker($event,column)"><i class="glyphicon glyphicon-calendar"></i></button> </span> <input type="text" class="form-control" datepicker-popup="{{column.options.format||\'fullDate\'}}" ng-model="item[column.field]" is-open="column.$$opened" datepicker-options="dateOptions" ng-required="{{column.required||false}}" close-text="Close" ng-change="_onChange(editedObject,column)" readonly="true" datepicker-popup datepicker-localdate/> </p> </td> <td nowrap class="ilTable_td_operations" style="vertical-align: middle"> <span class="glyphicon glyphicon-ok ilTable_edit_ok" ng-click="editRow(undefined,true)" style="cursor:pointer;padding-right: 0.5em" aria-hidden="true"></span> <span class="glyphicon glyphicon-remove ilTable_edit_cancel" ng-click="editRow(undefined)" style="cursor:pointer" aria-hidden="true"></span> </td> </tr> <tr ng-if="expand" ng-show="item[visual].expand" style="background-color: white !important" class="_expand_tr"> <td colspan="{{searchColspan}}" ng-include="expandTemplate" class="_expand_td"> </td> </tr> <tr ng-if="expand"> </tr> <tr ng-repeat-end></tr> <tr ng-if="expand" ng-show="item[visual].expand" style="background-color: white !important" class="_expand_tr"> <td colspan="{{searchColspan}}" ng-include="expandTemplate" class="_expand_td"> </td> </tr> </tbody> <tfoot> <tr ng-if="footer"> <td colspan="{{searchColspan}}"> <div class="idTable_footer_element ilTable_footer_results" ng-hide="results.length==0">{{results.length}} {{\'Results\'|translate}}</div> <div class="idTable_footer_element ilTable_footer_results" ng-show="results.length==0">{{\'No results\'|translate}}</div> <div class="idTable_footer_element ilTable_footer_itemsPerPage" ng-if="itemsPerPageOptions"> {{\'Items per page\'|translate}} <span class="dropdown" dropdown on-toggle="toggled(open)"> <a href class="dropdown-toggle" dropdown-toggle> {{itemsPerPage}} </a> <ul class="dropdown-menu"> <li ng-repeat="choice in itemsPerPageOptions"> <a ng-click="_changeItemsPerPage(choice)">{{choice}}</a> </li> </ul> </span> </div> <div ng-if="extraFooterTemplate" class="idTable_footer_element idTable_footer_extra" ng-include="extraFooterTemplate"></div> <div style="clear:both"></div> </td> </tr> <tr style="background-color: white" ng-show="itemsPerPage"> <td colspan="{{searchColspan}}" style="text-align: center; padding:0px"> <pagination total-items="results.length" items-per-page="itemsPerPage" ng-model="pagination_page" max-size="10" class="pagination-sm" boundary-links="true" previous-text="&lsaquo;" next-text="&rsaquo;" first-text="&laquo;" last-text="&raquo;"></pagination> </td> </tr> </tfoot> </table>';
		
		return {
			restrict: 'A',
			scope: {
				  mc: '=',
	              model: '=',
	              columns: '=',
	              editable: '=?',
	              search:"=?",
	              order:"=?",
	              select:"=?",
	              selectLabel:"=?",
	              selectOnClick:"=?",
	              selectMultiple:"=?",
	              delete:"=?",
	              expand:"=?",
	              footer:"=?",
	              expandTemplate:"=?",
	              onExpand:"&",
	              expandLabel:"=?",
	              clickToEdit:"=?",
	              itemsPerPage:"=?",
	              extraButtons:"=?",
	              extraFooterTemplate:"=?",
	              autoupdate: '=?',
	              onAutoupdate: '&',
	              autoupdatePrompt:'=?',
	              onChange: '&',
	              onDelete: '&',
	              onSelect:'&',
	              onClickItem:'&',
	              onExtraButtons:'&',
	              textSaveConfirm:"=?",
	              textDeleteConfirm:"=?",
	              itemsPerPageOptions:"=?",
	              operationsLabel:"=?",
	              showTitleColumn:"=?"
			},
			controller: controller,
			/*emplateUrl:'src/ilTable/ilTable.tpl.html',*/
			template:template
		};
	});